#define RESOLUTION float2(1920.0, 1080.0)
#define BLUR_SAMPLES 5          // Size of the kernel, keep at 10 or lower for safety
#define BLUR_OFFSET_SCALE 3     // The distance between samples
#define BLUR_INTENSITY 2.0      // Increase this value to blur more, diminishing returns past 2.0
#define SIGMA BLUR_INTENSITY

uniform float4x4 ViewProj;    // View projection matrix
uniform texture2d image;      // Input image texture

sampler_state texSampler
{
    AddressU  = Clamp;
    AddressV  = Clamp;
    Filter    = Linear;
};

struct VertexInOut
{
    float4 pos : POSITION;
    float2 uv  : TEXCOORD0;
};

VertexInOut VShader(VertexInOut vert_in)
{
    VertexInOut vert_out;
    vert_out.pos = mul(float4(vert_in.pos.xyz, 1.0), ViewProj);
    vert_out.uv = vert_in.uv;
    return vert_out;
}

float4 PShader(VertexInOut fragment_in) : TARGET
{
    // Calculate the kernel based on the sigma value
    float kernel[BLUR_SAMPLES];
    float kernelSum = 0.0;
    for (int i = 0; i < BLUR_SAMPLES; i++)
    {
        float x = i - (BLUR_SAMPLES - 1) / 2.0;
        kernel[i] = exp(-(x * x) / (2 * SIGMA * SIGMA));
        kernelSum += kernel[i];
    }
    for (int i = 0; i < BLUR_SAMPLES; i++)
    {
        kernel[i] /= kernelSum;
    }

    // Sample the input texture with offsets based on the weights
    float4 color = 0.0;
    for (int i = 0; i < BLUR_SAMPLES; i++)
    {
        for (int j = 0; j < BLUR_SAMPLES; j++) 
        {
            float2 offset = float2(i - (BLUR_SAMPLES - 1) / 2, j - (BLUR_SAMPLES - 1) / 2) * BLUR_OFFSET_SCALE;
            float weight = kernel[i] * kernel[j];
            color += image.Sample(texSampler, fragment_in.uv + offset / RESOLUTION) * weight;
        }
    }

    return color;
}

technique Draw
{
    pass
    {
        vertex_shader = VShader(vert_in);
        pixel_shader  = PShader(fragment_in);
    }
}
